import json		
import urlparse
import urllib
import hashlib

from zope.component import getUtility			
from zope.publisher.browser import BrowserView

from Products.PluggableAuthService.interfaces.plugins import IExtractionPlugin
from Products.statusmessages.interfaces import IStatusMessage

from plone.registry.interfaces import IRegistry		
from collective.beaker.interfaces import ISession

from cs.auth.googleplus import GOOGLEPLUSMessageFactory as _
from cs.auth.googleplus.plugin import SessionKeys
from cs.auth.googleplus.interfaces import ICSGooglePlusPlugin


GOOGLEPLUS_AUTH_URL = "https://accounts.google.com/o/oauth2/auth"
GOOGLEPLUS_ACCESS_TOKEN_URL = "https://accounts.google.com/o/oauth2/token"
GOOGLEPLUS_AUTHENTICATION_SALT_KEY = 'cs.auth.googleplus.AUTHENTICATION_SALT_KEY'
GOOGLEPLUS_PROFILE_URL= 'https://www.googleapis.com/oauth2/v1/userinfo'
PERMISSIONS = 'email'  #"https://www.googleapis.com/auth/plus.login" 
#(r"https://www.googleapis.com/auth/userinfo.profile" +
#	       r" https://www.googleapis.com/auth/userinfo.email") 
PERM='code'

from logging import getLogger
log = getLogger('cs.auth.googleplus') 

class GooglePlusLogin(BrowserView):
    """This view implements the Facebook OAuth 2.0 login protocol.

The user may access the view via a link in an action or elsewhere. He
will then be immediately redirected to Facebook, which will ask him to
authorize this as an application.
Assuming that works, Facebook will redirect the user back to this same
view, with a code in the request.
"""
    
    def __call__(self):		
        registry = getUtility(IRegistry)
        GOOGLEPLUS_CLIENT_ID = registry.get('cs.auth.googleplus.controlpanel.IGooglePlusLoginSettings.googleplus_client_id').encode()
        GOOGLEPLUS_CLIENT_SECRET = registry.get('cs.auth.googleplus.controlpanel.IGooglePlusLoginSettings.googleplus_client_secret').encode()
	

        verificationCode = self.request.form.get("code", None)
	error = self.request.form.get("error", None)
        errorReason = self.request.form.get("error_reason", None)
	

        salt = hashlib.sha256().hexdigest()
        session = ISession(self.request)
        session[GOOGLEPLUS_AUTHENTICATION_SALT_KEY] = salt
        args = {
                'state': "profile",
                'scope': PERMISSIONS,
                'client_id': GOOGLEPLUS_CLIENT_ID,
                'redirect_uri': "%s/%s" % (self.context.absolute_url(),self.__name__),
		'response_type': PERM,
            }

             
        # Did we get an error back after a Facebook redirect?
        if error is not None or errorReason is not None:
            log.info(error)
            log.info(errorReason)
            IStatusMessage(self.request).add(_(u"GOOGLEPLUS authentication denied"), type="error")
            self.request.response.redirect(self.context.absolute_url())
            return u""
        
        # Check if this the status is the same...
        return_salt = self.request.form.get('status', '')
	print "returnsalt"
	print return_salt
        if return_salt and return_salt != session.get(GOOGLEPLUS_AUTHENTICATION_SALT_KEY):
            IStatusMessage(self.request).add(_(u"GooglePlus authentication denied"), type="error")
            self.request.response.redirect(self.context.absolute_url())
            log.info('%s != %s' % (return_salt, session.get(GOOGLEPLUS_AUTHENTICATION_SALT_KEY)))
            return u""

        # If there is no code, this is probably the first request, so redirect
        # to Facebook
        if verificationCode is None:
	    print "egin duuuuu------------------------------------------------------------------------------------"	
            self.request.response.redirect(
                    "%s?%s" % (GOOGLEPLUS_AUTH_URL, urllib.urlencode(args),)
                )
            return u""
        
	# If we are on the return path form Facebook,
        # exchange the return code for a token
	
	args = {
		'code':verificationCode,
		'client_id': GOOGLEPLUS_CLIENT_ID,
		'client_secret': GOOGLEPLUS_CLIENT_SECRET,
		'redirect_uri': "%s/%s" % (self.context.absolute_url(),self.__name__),
                'grant_type': 'authorization_code',
		#'response_type': 'token',
		#'approval_prompt': 'force',
		#'scope': PERMISSIONS,
            }       
        
	#args["client_secret"] = GOOGLEPLUS_CLIENT_SECRET
        #args["code"] = verificationCode
	#args["grant_type"] = 'authorization'
	
        response = urlparse.parse_qs(urllib.urlopen(
                "%s?%s" % (GOOGLEPLUS_ACCESS_TOKEN_URL, urllib.urlencode(args),)
            ).read())
	
	print  "%s?%s" % (GOOGLEPLUS_ACCESS_TOKEN_URL, urllib.urlencode(args),)
	print "self.request"
	print self.request.items()
	print "RESPONSE:"
	print response        
	
        #Load the profile using the access token we just received
        accessToken = response["access_token"][-1]
        
        profile = json.load(urllib.urlopen(
                "%s?%s" % (GOOGLEPLUS_PROFILE_URL, urllib.urlencode({'access_token': accessToken}),)
            ))

        userId = profile.get('id')
        name = profile.get('name')
        email = profile.get('email', '')
        username = profile.get('username', '')
        location = profile.get('location', {}).get('name', '')

        profile_image = urllib.urlopen(
                "%s?%s" % (GOOGLEPLUS_PROFILE_PICTURE_URL, urllib.urlencode({'access_token': accessToken}),)
            ).read()

        if not userId or not name:
            IStatusMessage(self.request).add(_(u"Insufficient information in GooglePlus profile"), type="error")
            self.request.response.redirect(self.context.absolute_url())
            return u""
        
        # Save the data in the session so that the extraction plugin can
        # authenticate the user to Plone
        session[SessionKeys.accessToken] = accessToken
        session[SessionKeys.userId] = userId
        session[SessionKeys.userName] = username or userId
        session[SessionKeys.fullname] = name
        session[SessionKeys.email] = email
        session[SessionKeys.location] = location
        session[SessionKeys.profile_image] = profile_image
        session.save()

        # Add user data into our plugin storage:
        acl = self.context.acl_users
        acl_plugins = acl.plugins
        ids = acl_plugins.listPluginIds(IExtractionPlugin)
        for id in ids:
            plugin = getattr(acl_plugins, id)
            if ICSGooglePlusPlugin.providedBy(plugin):
                user_data = plugin._storage.get(session[SessionKeys.userId], {})
                user_data['username'] = session[SessionKeys.userName]
                user_data['fullname'] = session[SessionKeys.fullname]
                user_data['email'] = session[SessionKeys.email]
                user_data['location'] = session[SessionKeys.location]
                plugin._storage[session[SessionKeys.userId]] = user_data

        
        IStatusMessage(self.request).add(_(u"Welcome. You are now logged in."), type="info")
        
        return_args = ''
        if self.request.get('came_from', None) is not None:
            return_args = {'came_from': self.request.get('came_from')}
            return_args = '?' + urllib.urlencode(return_args)

        self.request.response.redirect(self.context.absolute_url() + '/logged_in' + return_args)
